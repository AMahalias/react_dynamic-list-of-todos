{"version":3,"sources":["api.ts","types/FilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","getUser","userId","TodoList","todos","selectedTodo","setSelectedTodo","selectTodo","useMemo","todo","className","map","classnames","id","completed","title","type","onClick","TodoFilter","query","setQuery","filterType","setFilterType","handleChangeInput","event","target","value","handleChangeFilterType","ACTIVE","COMPLETED","ALL","onChange","placeholder","style","pointerEvents","Loader","TodoModal","setNullInsteadTodo","useState","user","setUser","getUserFromServer","a","userFromServer","Error","href","email","name","App","setTodos","isLoading","setIsLoading","useEffect","todosFromServer","handleValue","toLowerCase","includes","visibleTodos","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47230f25.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nexport function wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { useMemo } from 'react';\nimport classnames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  setSelectedTodo: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos, selectedTodo, setSelectedTodo,\n}) => {\n  const selectTodo = useMemo(() => (todo: Todo) => {\n    setSelectedTodo(todo);\n  }, [selectedTodo]);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <>\n            <tr\n              data-cy=\"todo\"\n              className={classnames(\n                { 'has-background-info-light': todo.id === selectedTodo?.id },\n              )}\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classnames({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => selectTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classnames('far',\n                      (todo.id === selectedTodo?.id)\n                        ? 'fa-eye-slash'\n                        : 'fa-eye')}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          </>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { ChangeEvent, useMemo } from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  query: string;\n  setQuery: (arg: string) => void;\n  filterType: string;\n  setFilterType: (arg: FilterType) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query, setQuery, filterType, setFilterType,\n}) => {\n  const handleChangeInput = useMemo(\n    () => (event: ChangeEvent<HTMLInputElement>) => {\n      setQuery(event.target.value);\n    }, [query],\n  );\n\n  const handleChangeFilterType = useMemo(\n    () => (event: ChangeEvent<HTMLSelectElement>) => {\n      switch (event.target.value) {\n        case FilterType.ACTIVE:\n          return setFilterType(FilterType.ACTIVE);\n        case FilterType.COMPLETED:\n          return setFilterType(FilterType.COMPLETED);\n\n        default:\n          return setFilterType(FilterType.ALL);\n      }\n    }, [filterType],\n  );\n\n  const clearQuery = () => setQuery('');\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={handleChangeFilterType}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChangeInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo;\n  setNullInsteadTodo: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo, setNullInsteadTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const {\n    id, userId, title, completed,\n  } = selectedTodo;\n\n  const getUserFromServer = async () => {\n    try {\n      const userFromServer = await getUser(userId);\n\n      setUser(userFromServer);\n    } catch {\n      throw new Error('There is not found chosen user');\n    }\n  };\n\n  getUserFromServer();\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={setNullInsteadTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { getTodos } from './api';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [filterType, setFilterType] = useState<FilterType>(FilterType.ALL);\n\n  useEffect(() => {\n    try {\n      getTodos()\n        .then(todosFromServer => {\n          setTodos(todosFromServer);\n          setIsLoading(true);\n        });\n    } catch {\n      throw new Error('There are not todos');\n    }\n  }, []);\n\n  const handleValue = (value: string) => (\n    value.toLowerCase().includes(query.toLowerCase())\n  );\n\n  const visibleTodos = useMemo(() => {\n    const filteredTodos = todos.filter(todo => {\n      handleValue(todo.title);\n\n      switch (filterType) {\n        case FilterType.ACTIVE:\n          return !todo.completed && handleValue(todo.title);\n\n        case FilterType.COMPLETED:\n          return todo.completed && handleValue(todo.title);\n\n        default:\n          return handleValue(todo.title);\n      }\n    });\n\n    return filteredTodos;\n  }, [todos, filterType, query]);\n\n  const setClearQuery = () => setSelectedTodo(null);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                filterType={filterType}\n                setFilterType={setFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodo={selectedTodo}\n                  setSelectedTodo={setSelectedTodo}\n                />\n              ) : (\n                <Loader />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          setNullInsteadTodo={setClearQuery}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}